package almacen;

public class Almacen<T extends IComparador>
{
	private Object[] elementos;

	private int cont;

	public Almacen(int numMaximo)
	{
		elementos = new Object[numMaximo];
		cont = 0;
	}

	public int getCapacidad()
	{
		return elementos.length;
	}

	public int getNumeroElementos()
	{
		return cont;
	}

	public boolean anadir(T t)
	{
		if(cont == elementos.length)
		{
			return false;
		}
		// Si no se encuentra el elemento, se añade
		if(buscarElemento(t) == -1)
		{
			elementos[cont] = t;
			cont++;
			return true;
		}
		else
		{
			// El elemento ya existe
			return false;
		}

	}

	/**
	 * Busca un elemento dentro del array
	 * @param t
	 * @return posición donde lo ha encontrado, o -1 en caso contrario.
	 */
	private int buscarElemento(T t)
	{
		int inicio = 0;
		int fin = cont - 1;
		int centro;
		while(inicio <= fin)
		{
			centro = (inicio + fin) / 2;
			if(t.sonIguales(elementos[centro]))
			{
				return centro;
			}
			else if(t.esMayor(elementos[centro]))
			{
				inicio = centro + 1;
			}
			else
			{
				fin = centro - 1;
			}
		}
		return -1;
	}

	public boolean eliminar(T t)
	{
		if(cont == 0)
		{
			return false;
		}
		int posicion = buscarElemento(t);
		// Si no existe el elemento, salimos
		if(posicion == -1)
		{
			return false;
		}
		for (int i = posicion; i < cont - 1; i++)
		{
			elementos[i] = elementos[i + 1];
		}
		cont--;
		return true;
	}

	public boolean existe(T t)
	{
		if(buscarElemento(t) != -1)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	public Object[] getElementos()
	{
		Object[] aux = new Object[cont];
		for (int i = 0; i < aux.length; i++)
		{
			aux[i] = elementos[i];
		}
		return aux;
	}


}
